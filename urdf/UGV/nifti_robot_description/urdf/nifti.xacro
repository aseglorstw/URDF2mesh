<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="NIFTi">

    <!-- ARGUMENTS FOR DETERMINING REMOVABLE ROBOT PARTS PRESENCE AND POSITION ON THE BODY. -->
    <!-- Positions of parts attachable to the top aluminium panel are given in a coordinate system whose
        zero point is in the rear right corner of the top panel (rear_right_box). This way, all parts'
        coordinates should only be positive numbers and are easily measured. To find out the zero points
        of the parts, refer either to comments here or to the 3D models of the parts.

        All these configuration values should be set in robot.yaml -> parts_config section.
    -->
    <!-- Pass either "urdf" or "sdf" to tell the parser what is the desired target format. -->
    <xacro:arg name="rendering_target" default="urdf" />
    
    <!-- 0: use precise collision meshes, 1: use coarse collision meshes, 2: use collisions made of primitive shapes -->
    <xacro:arg name="simplified_collision" default="2" />
    <!-- If nonempty, the body visual will not be textured, but will consist of only a single color specified here.
         Example of value: '0 1 0 1' (don't forget to set alpha to 1!). -->
    <xacro:arg name="body_color" default="" />

	<!-- Body shape revision. Possible values are 2010, 2014 and 2021 -->
	<xacro:arg name="revision" default="2014" />

    <xacro:arg name="has_top_box" default="1" />
    <!-- Distance from robot's back to top box' front panel. Default is the front-most position. -->
    <xacro:arg name="top_box_j_x" default="0.4977" />

    <xacro:arg name="has_sick_lidar" default="1" />
    <xacro:arg name="has_omnicam" default="1" />
	<xacro:arg name="has_omnicam_vras" default="0" />
	<xacro:arg name="has_omnicam_sensor_mount" default="0" />
    <xacro:arg name="has_flippers" default="1" />
    <xacro:arg name="has_differential" default="1" />
	<xacro:arg name="has_jetson" default="0" />
	<xacro:arg name="has_mote_deployer" default="0" />
	
	<xacro:arg name="num_cliff_sensors" default="0" />

	<xacro:arg name="has_rear_sensor_item" default="0" />
    <xacro:arg name="rear_sensor_item_x" default="0.084" />
    <xacro:arg name="rear_sensor_item_y" default="0.02" />
	<xacro:arg name="rear_sensor_item_height" default="0.35" />

    <xacro:arg name="laser_pitch" default="0.0" />

    <xacro:arg name="payload_xacros" default="[]" />
    <!-- render_xacro.py allows use of arguments like $(arg rover_trackLength) etc. which are not defined here -->
    <!-- render_xacro.py also adds all static transforms from robot yaml files accessible like camera_0_pos_x or realsense_holder_part1_quat_w -->

    <!-- little hacks -->
    <xacro:arg name="big_collision_box_on_top" default="1" />
    <xacro:arg name="big_collision_box_height" default="0.25" />
    <xacro:arg name="big_collision_box_width" default="0.31" />
	<xacro:arg name="big_collision_box_length" default="0.65" />
    <xacro:arg name="big_collision_box_x" default="-0.21" />

    <xacro:arg name="flipper_inflation_ratio" default="1.0" />
    <!-- Since laser does a really bad job in filtering the flippers out, we need to extend them a bit inwards. The outer outline of the flippers should still remain realistic. -->
    <xacro:arg name="flipper_inward_enlargement" default="0.017" />
    <xacro:arg name="track_inward_enlargement" default="0.015" />

    <!-- payload -->

    <xacro:arg name="has_flipper_touch_sensors" default="0" />
    <xacro:arg name="has_gps_antenna" default="0" />
    <xacro:arg name="gps_antenna_height" default="0.4" />
    <xacro:arg name="gps_antenna_radius" default="0.03" />
    <xacro:arg name="gps_antenna_disc_radius" default="0.05" />
    

    <!-- ARGUMENTS FOR GENERATING FIXED ROBOT MODEL -->
    <xacro:arg name="robot_fixed" default="0" />
    <xacro:arg name="left_track_angle" default="0.0" />
    <xacro:arg name="right_track_angle" default="0.0" />
    <xacro:arg name="front_left_flipper_angle" default="0.0" />
    <xacro:arg name="front_right_flipper_angle" default="0.0" />
    <xacro:arg name="rear_left_flipper_angle" default="0.0" />
    <xacro:arg name="rear_right_flipper_angle" default="0.0" />
    <xacro:arg name="laser_angle" default="0.0" />

    <!-- ARGUMENTS FOR SAFE EXPLORATION -->
    <xacro:arg name="base_link_cog_offset" default="0.0" />

    <!-- MEASURED CONSTANTS -->

    <xacro:property name="body_scale" value="1.0" />
    <xacro:property name="body_mass" value="6.746" />

    <xacro:property name="battery_scale" value="1.0" />
    <xacro:property name="battery_mass" value="3.18" />

    <xacro:property name="top_box_scale" value="1.0" />
    <xacro:property name="top_box_mass" value="0.24" />

    <xacro:property name="antenna_scale" value="1.0" />
    <xacro:property name="antenna_mass" value="0.56" />

    <xacro:property name="track_scale" value="1.0" />
    <xacro:property name="track_mass" value="6.06" />

    <xacro:property name="flipper_scale" value="1.0" />
    <xacro:property name="flipper_mass" value="0.75" />

    <xacro:property name="laser_scale" value="1.0" />
    <xacro:property name="laser_mass" value="1.1" />

    <xacro:property name="omnicam_scale" value="1.0" />
    <xacro:property name="omnicam_mass" value="2.414" />

    <!-- MACRO SPECIFICATIONS -->

    <xacro:include filename="$(find nifti_robot_description)/urdf/utils.xacro" />

	<xacro:macro name="calibrated_fixed_joint" params="name parent child prefix:='' lump:='1'">
        <!-- These arguments are filled by render_xacro.py from calibration data. -->
        <xacro:if value="${prefix == ''}">
            <xacro:property name="pref" value="${child}" />
        </xacro:if>
        <xacro:if value="${prefix != ''}">
            <xacro:property name="pref" value="${prefix}" />
        </xacro:if>
        <xacro:fixed_joint name="${name}" parent="${parent}" child="${child}"
                           xyz="$(arg ${pref}_pos_x) $(arg ${pref}_pos_y) $(arg ${pref}_pos_z)"
                           rpy="$(arg ${pref}_rpy_r) $(arg ${pref}_rpy_p) $(arg ${pref}_rpy_y)"
                           lump="${lump}"/>
    </xacro:macro>

    <!-- SPECIAL LINKS -->

    <!-- This is a virtual link that specifies the origin to which parts attachable to the top of the robot should be related. -->
	<link name="rear_right_box" />
	<xacro:if value="${'$(arg revision)' == '2021'}">
		<xacro:fixed_joint name="rear_right_box_j" parent="base_link" child="rear_right_box" rpy="0 0 0"
						   xyz="${-$(arg rover_robotLengthBody)/2} ${-$(arg rover_robotWidthBody)/2} 0.185"/>
	</xacro:if>
	<xacro:unless value="${'$(arg revision)' == '2021'}">
		<xacro:fixed_joint name="rear_right_box_j" parent="base_link" child="rear_right_box" rpy="0 0 0" xyz="-0.379 -0.1265 0.185"/>
	</xacro:unless>

    <!-- INCLUDES -->

    <!-- The included models should have collision elements specified for all physical links to be filtered out by laser filtering. -->
    <!--
    This loop includes all Xacro files defined in payload_xacros arg. That one gets filled by render_xacro.py.
    All payload packages have to `exec_depend` on this package and export this tag:
    `<nifti_robot_description payload_xacro="${prefix}/path/to.xacro" />`.
    The pre-installed payload packages should be specified in dependencies.rosinstall in this package. 
     -->
    <xacro:macro name="include_payload_xacros" params="xacros">
        <xacro:if value="${len(xacros) > 0}">
            <xacro:include filename="${xacros[0]}" />
            <xacro:include_payload_xacros xacros="${xacros[1:]}" />
        </xacro:if>
    </xacro:macro>
    <xacro:include_payload_xacros xacros="${$(arg payload_xacros)}" />

    <xacro:include filename="$(find nifti_robot_description)/urdf/unused_payloads.xacro" />

    <xacro:if value="${'$(arg revision)' == '2021'}">
        <xacro:include filename="$(find nifti_robot_description)/urdf/lights.xacro" />
    </xacro:if>

    <!-- NIFTI ROBOT LINKS AND JOINTS SPECIFICATION -->

    <xacro:property name="body_color" value="$(arg body_color)" />
	<link name="base_link">
        <xacro:if value="${'$(arg revision)' == '2021'}">
            <xacro:property name="body_mesh_name" value="body_2021.dae" />
        </xacro:if>
        <xacro:unless value="${'$(arg revision)' == '2021'}">
            <xacro:property name="body_mesh_name" value="body.dae" />
        </xacro:unless>
        <xacro:if value="${len(body_color) == 0}">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${body_scale} ${body_scale} ${body_scale}"
                          filename="package://nifti_robot_description/meshes/${body_mesh_name}"/>
                </geometry>
            </visual>
        </xacro:if>
        <xacro:if value="${len(body_color) > 0}">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0.118"/>
                <geometry>
                    <box size="$(arg rover_robotLengthBody) $(arg rover_robotWidthBody) 0.1390" />
                </geometry>
                <material name="body_color">
                    <color rgba="$(arg body_color)"/>
                </material>
            </visual>
            <xacro:unless value="${'$(arg revision)' == '2021'}">
                <visual>
                    <origin rpy="0 0 0" xyz="0.157 0 0.118"/>
                    <geometry>
                        <box size="0.056 0.12093 0.1390" />
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
                <visual>
                    <origin rpy="0 0 0.785398" xyz="0.144 -0.076 0.118"/>
                    <geometry>
                        <box size="0.083 0.040 0.1390" />
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
                <visual>
                    <origin rpy="0 0 -0.785398" xyz="0.144 0.076 0.118"/>
                    <geometry>
                        <box size="0.083 0.040 0.1390" />
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
            </xacro:unless>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==0}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${body_scale} ${body_scale} ${body_scale}"
                          filename="package://nifti_robot_description/meshes/${body_mesh_name}"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==1}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${body_scale} ${body_scale} ${body_scale}"
                          filename="package://nifti_robot_description/meshes/collide/${body_mesh_name}"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==2}">
            <collision>
                <xacro:if value="${'$(arg revision)' == '2021'}">
                    <xacro:property name="bodyCollHeight" value="${0.143 - $(arg rover_bodyEdgeCurvature)}" />
                    <xacro:property name="bodyCollZshift" value="${0.122 + $(arg rover_bodyEdgeCurvature)/2}" />
                </xacro:if>
                <xacro:unless value="${'$(arg revision)' == '2021'}">
                    <xacro:property name="bodyCollHeight" value="0.1390" />
                    <xacro:property name="bodyCollZshift" value="0.118" />
                </xacro:unless>
                <origin rpy="0 0 0" xyz="$0 0 ${bodyCollZshift}"/>
                <geometry>
                    <box size="$(arg rover_robotLengthBody) $(arg rover_robotWidthBody) ${bodyCollHeight}" />
                </geometry>
            </collision>
            <xacro:unless value="${'$(arg revision)' == '2021'}">
                <collision>
                    <origin rpy="0 0 0" xyz="0.157 0 0.118"/>
                    <geometry>
                        <box size="0.056 0.12093 0.1390" />
                    </geometry>
                </collision>
                <collision>
                    <origin rpy="0 0 0.785398" xyz="0.144 -0.076 0.118"/>
                    <geometry>
                        <box size="0.083 0.040 0.1390" />
                    </geometry>
                </collision>
                <collision>
                    <origin rpy="0 0 -0.785398" xyz="0.144 0.076 0.118"/>
                    <geometry>
                        <box size="0.083 0.040 0.1390" />
                    </geometry>
                </collision>
            </xacro:unless>
            <collision>
                <origin rpy="0 0 0" xyz="0 0.135 0.09"/>
                <geometry>
                    <box size="0.055 0.040 0.08" />
                </geometry>
            </collision>
            <collision>
                <origin rpy="0 0 0" xyz="0 0.155 0.013"/>
                <geometry>
                    <box size="0.055 0.020 0.075" />
                </geometry>
            </collision>
            <collision>
                <origin rpy="0 0 0" xyz="0 -0.135 0.09"/>
                <geometry>
                    <box size="0.055 0.040 0.08" />
                </geometry>
            </collision>
            <collision>
                <origin rpy="0 0 0" xyz="0 -0.155 0.013"/>
                <geometry>
                    <box size="0.055 0.020 0.075" />
                </geometry>
            </collision>
            <xacro:if value="${'$(arg revision)' == '2021'}">
                <collision>
                    <origin rpy="0 0 0" xyz="0 0 ${0.048 + $(arg rover_bodyEdgeCurvature)/2}"/>
                    <geometry>
                        <box size="${$(arg rover_robotLengthBody) - 2*$(arg rover_bodyEdgeCurvature)} $(arg rover_robotWidthBody) $(arg rover_bodyEdgeCurvature)" />
                    </geometry>
                </collision>
                <collision>
                    <!-- We enlarge the radius a tiny bit to avoid wrong contact forces on the interface between the bottom plate and the cylinder -->
                    <origin xyz="${$(arg rover_robotLengthBody)/2-$(arg rover_bodyEdgeCurvature)} 0 ${0.048 + $(arg rover_bodyEdgeCurvature)}"
                            rpy="${pi/2} 0 0"/>
                    <geometry>
                        <cylinder length="$(arg rover_robotWidthBody)" radius="${$(arg rover_bodyEdgeCurvature)*1.001}" />
                    </geometry>
                </collision>
                <collision>
                    <!-- We enlarge the radius a tiny bit to avoid wrong contact forces on the interface between the bottom plate and the cylinder -->
                    <origin xyz="${-$(arg rover_robotLengthBody)/2+$(arg rover_bodyEdgeCurvature)} 0 ${0.048 + $(arg rover_bodyEdgeCurvature)}"
                            rpy="${pi/2} 0 0"/>
                    <geometry>
                        <cylinder length="$(arg rover_robotWidthBody)" radius="${$(arg rover_bodyEdgeCurvature)*1.001}" />
                    </geometry>
                </collision>
            </xacro:if>
        </xacro:if>
        <xacro:if value="$(arg big_collision_box_on_top)">
            <collision name="big_collision_box">
                <origin rpy="0 0 0" xyz="$(arg big_collision_box_x) 0 ${0.08 + $(arg big_collision_box_height)/2}"/>
                <geometry>
                    <box size="$(arg big_collision_box_length) $(arg big_collision_box_width) $(arg big_collision_box_height)" />
                </geometry>
            </collision>
        </xacro:if>
        <inertial>
            <xacro:property name="base_link_cog_offset" value="$(arg base_link_cog_offset)" />
            <origin xyz="${-0.034+base_link_cog_offset} 0 0.142" rpy="0 0 0"/>
            <mass value="${body_mass}"/>
            <xacro:inertia_meshlab
                    ixx="6.9904e-003" ixy="1.2271e-004" ixz="-4.2725e-005"
                    iyy="2.1290e-002" iyz="-1.0522e-004"
                    izz="2.5519e-002"
                    scale="${body_scale}" mass="${body_mass}" />
        </inertial>
    </link>

    <xacro:if value="$(arg has_rear_sensor_item)">
        <link name="rear_sensor_item">
            <visual>
                <origin xyz="0 0 ${$(arg rear_sensor_item_height)/2}" rpy="0 0 0" />
                <geometry>
                    <box size="0.02 0.02 $(arg rear_sensor_item_height)"/>
                </geometry>
                <material name="aluminium">
                    <color rgba="0.8 0.8 0.8 1"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 ${$(arg rear_sensor_item_height)/2}" rpy="0 0 0" />
                <geometry>
                    <box size="0.02 0.02 $(arg rear_sensor_item_height)" />
                </geometry>
            </collision>
        </link>
        <xacro:fixed_joint name="rear_sensor_item_j" parent="rear_right_box" child="rear_sensor_item"
                           xyz="$(arg rear_sensor_item_x) $(arg rear_sensor_item_y) 0" rpy="0 0 0" />
    </xacro:if>

    <link name="battery">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <mesh scale="${battery_scale} ${battery_scale} ${battery_scale}"
                      filename="package://nifti_robot_description/meshes/battery.dae"/>
            </geometry>
        </visual>
        <xacro:if value="${$(arg simplified_collision)==0}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${battery_scale} ${battery_scale} ${battery_scale}"
                          filename="package://nifti_robot_description/meshes/battery.dae"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==1}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${battery_scale} ${battery_scale} ${battery_scale}"
                          filename="package://nifti_robot_description/meshes/collide/battery.dae"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==2}">
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0.0410"/>
                <geometry>
                    <box size="0.1450 0.1350 0.0820" />
                </geometry>
            </collision>
        </xacro:if>
        <inertial>
            <origin xyz="0 0 0.041" rpy="0 0 0"/>
            <mass value="${battery_mass}"/>
            <xacro:inertia_meshlab
                    ixx="0.0020793" ixy="0" ixz="0"
                    iyy="0.0023127" iyz="0"
                    izz="0.0032712"
                    scale="${battery_scale}" mass="${battery_mass}" />
        </inertial>
    </link>
	<xacro:unless value="${'$(arg revision)' == '2021'}">
		<xacro:fixed_joint name="battery_j" parent="base_link" child="battery" xyz="-0.2836 -0.0221 0.0722" rpy="0 0 0" />
	</xacro:unless>
	<xacro:if value="${'$(arg revision)' == '2021'}">
		<xacro:fixed_joint name="battery_j" parent="base_link" child="battery" xyz="-0.105 0 0.12" rpy="0 ${pi/2} 0" />
	</xacro:if>
    
    <xacro:if value="$(arg has_battery_cover)">
        <link name="battery_cover">
            <visual>
                <origin xyz="0 0 ${$(arg battery_cover_height)/2.0}" />
                <geometry>
                    <box size="0.13 0.185 $(arg battery_cover_height)" />
                </geometry>
                <material name="body_color">
                    <color rgba="0 ${94/255.0} ${184/255.0} 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 ${$(arg battery_cover_height)/2.0}" />
                <geometry>
                    <box size="0.13 0.185 $(arg battery_cover_height)" />
                </geometry>
            </collision>
        </link>
        <xacro:fixed_joint name="battery_cover_j" parent="rear_right_box" child="battery_cover"
                           xyz="$(arg battery_cover_x) ${$(arg rover_robotWidthBody)/2.0} 0.0" rpy="0 0 0" />
    </xacro:if>

    <xacro:if value="$(arg has_top_box)">
		<xacro:if value="${'$(arg revision)' == '2021'}">
			<xacro:property name="top_box_mesh_name" value="top_box_2021_ladybug.dae" />
		</xacro:if>
		<xacro:unless value="${'$(arg revision)' == '2021'}">
			<xacro:property name="top_box_mesh_name" value="top_box.dae" />
		</xacro:unless>
        <link name="top_box">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${top_box_scale} ${top_box_scale} ${top_box_scale}"
                          filename="package://nifti_robot_description/meshes/${top_box_mesh_name}"/>
                </geometry>
            </visual>
            <xacro:if value="${$(arg simplified_collision)==0}">
                <collision>
                    <origin xyz="0 0 0" rpy="0 0 0" />
                    <geometry>
                        <mesh scale="${top_box_scale} ${top_box_scale} ${top_box_scale}"
                              filename="package://nifti_robot_description/meshes/${top_box_mesh_name}"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==1}">
                <collision>
                    <origin xyz="0 0 0" rpy="0 0 0" />
                    <geometry>
                        <mesh scale="${top_box_scale} ${top_box_scale} ${top_box_scale}"
                              filename="package://nifti_robot_description/meshes/collide/${top_box_mesh_name}"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==2}">
                <!-- the box -->
                <collision>
                    <xacro:if value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="0 0 0.0485"/>
                        <geometry>
                            <box size="0.18 0.233 0.097" />
                        </geometry>
                    </xacro:if>
                    <xacro:unless value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="-0.0290 0 0.0315"/>
                        <geometry>
                            <box size="0.2000 0.1330 0.06252" />
                        </geometry>
                    </xacro:unless>
                </collision>
                <!-- GPS antenna -->
                <collision>
                    <xacro:if value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="-0.04 0.09 0.0690"/>
                    </xacro:if>
                    <xacro:unless value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="-0.09824 0.04127 0.0690"/>
                    </xacro:unless>
                    <geometry>
                        <box size="0.0440 0.0440 0.01303" />
                    </geometry>
                </collision>
                <!-- E-stop -->
                <collision>
                    <xacro:if value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="0.01474 -0.08352 0.07996"/>
                    </xacro:if>
                    <xacro:unless value="${'$(arg revision)' == '2021'}">
                        <origin rpy="0 0 0" xyz="-0.07383 -0.04222 0.07996"/>
                    </xacro:unless>
                    <geometry>
                        <box size="0.03732 0.03523 0.03489" />
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${'$(arg revision)' == '2021'}">
                <visual>
                    <origin xyz="-0.1 $(arg top_box_ant_lora_y) ${$(arg top_box_ant_lora_z) + $(arg top_box_ant_lora_length)/2.0}" rpy="$(arg top_box_ant_lora_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_lora_length)" radius="0.01" />
                    </geometry>
                    <material name="black_color">
                        <color rgba="0.0 0.0 0.0 1.0"/>
                    </material>
                </visual>
                <collision>
                    <origin xyz="-0.1 $(arg top_box_ant_lora_y) ${$(arg top_box_ant_lora_z) + $(arg top_box_ant_lora_length)/2.0}" rpy="$(arg top_box_ant_lora_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_lora_length)" radius="0.01" />
                    </geometry>
                </collision>
                <visual>
                    <origin xyz="0.1 $(arg top_box_ant_l_wifi_y) ${$(arg top_box_ant_l_wifi_z) + $(arg top_box_ant_l_wifi_length)/2.0}" rpy="$(arg top_box_ant_l_wifi_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_l_wifi_length)" radius="0.01" />
                    </geometry>
                    <material name="black_color">
                        <color rgba="0.0 0.0 0.0 1.0"/>
                    </material>
                </visual>
                <collision>
                    <origin xyz="0.1 $(arg top_box_ant_l_wifi_y) ${$(arg top_box_ant_l_wifi_z) + $(arg top_box_ant_l_wifi_length)/2.0}" rpy="$(arg top_box_ant_l_wifi_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_l_wifi_length)" radius="0.01" />
                    </geometry>
                </collision>
                <visual>
                    <origin xyz="0.1 $(arg top_box_ant_r_wifi_y) ${$(arg top_box_ant_r_wifi_z) + $(arg top_box_ant_r_wifi_length)/2.0}" rpy="$(arg top_box_ant_r_wifi_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_r_wifi_length)" radius="0.01" />
                    </geometry>
                    <material name="black_color">
                        <color rgba="0.0 0.0 0.0 1.0"/>
                    </material>
                </visual>
                <collision>
                    <origin xyz="0.1 $(arg top_box_ant_r_wifi_y) ${$(arg top_box_ant_r_wifi_z) + $(arg top_box_ant_r_wifi_length)/2.0}" rpy="$(arg top_box_ant_r_wifi_angle) 0 0" />
                    <geometry>
                        <cylinder length="$(arg top_box_ant_r_wifi_length)" radius="0.01" />
                    </geometry>
                </collision>
            </xacro:if>
            <inertial>
                <origin xyz="0 0 0.041" rpy="0 0 0"/>
                <mass value="${top_box_mass}"/>
                <xacro:inertia_meshlab
                        ixx="0.0026136" ixy="0" ixz="0"
                        iyy="0.0049426" iyz="0"
                        izz="0.0070334"
                        scale="${top_box_scale}" mass="${top_box_mass}" />
            </inertial>
        </link>
        <xacro:property name="top_box_j_x" value="$(arg top_box_j_x)" />
        <xacro:if value="${'$(arg revision)' == '2021'}">
            <!-- Origin of top box is 0.09 m from the front side. And top_box_j_x is distance from robot's back to top box' front. -->
            <xacro:fixed_joint name="top_box_j" parent="rear_right_box" child="top_box" xyz="${top_box_j_x-0.09} ${$(arg rover_robotWidthBody)/2} 0.0" rpy="0 0 0"/>
            <xacro:if value="$(arg has_omnicam_vras)">
                <link name="top_box_step">
                    <xacro:property name="top_box_step_width" value="0.12" />
                    <xacro:property name="top_box_step_height" value="0.1" />
                    <visual>
                        <origin rpy="0 0 0" xyz="0 0 ${top_box_step_height/2}"/>
                        <geometry>
                            <box size="0.1270 ${top_box_step_width} ${top_box_step_height}" />
                        </geometry>
                        <material name="body_color">
                            <color rgba="0 ${94/255.0} ${184/255.0} 1.0"/>
                        </material>
                    </visual>
                    <visual>
                        <origin rpy="0 $(arg ouster_rpy_p) 0" xyz="${$(arg ouster_pos_x) - 0.01} 0 ${$(arg ouster_pos_z) - 0.075}"/>
                        <geometry>
                            <cylinder radius="0.025" length="0.05" />
                        </geometry>
                        <material name="body_color">
                            <color rgba="0 ${94/255.0} ${184/255.0} 1.0"/>
                        </material>
                    </visual>
                    <collision>
                        <origin rpy="0 0 0" xyz="0 0 ${top_box_step_height/2}"/>
                        <geometry>
                            <box size="0.1270 ${top_box_step_width} ${top_box_step_height}" />
                        </geometry>
                    </collision>
                    <xacro:box_inertial mass="1.0" width="${top_box_step_width}" height="${top_box_step_height}" depth="0.1270" xyz="0 0 ${top_box_step_height/2}" />
                </link>
                <xacro:fixed_joint name="top_box_step_j" parent="top_box" child="top_box_step" xyz="0 0 0.06252" />
                <xacro:solid_color_link_material link="top_box_step" r="0" g="${94/255.0}" b="${184/255.0}" />
            </xacro:if>
        </xacro:if>
        <xacro:unless value="${'$(arg revision)' == '2021'}">
            <!-- Origin of top box is 0.071 m from the front side. And top_box_j_x is distance from robot's back to top box' front. -->
            <xacro:fixed_joint name="top_box_j" parent="rear_right_box" child="top_box" xyz="${top_box_j_x-0.071} 0.0708 0.0" rpy="0 0 0"/>
        </xacro:unless>
    </xacro:if>
    <link name="antenna">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <mesh scale="${antenna_scale} ${antenna_scale} ${antenna_scale}"
                      filename="package://nifti_robot_description/meshes/antenna.dae"/>
            </geometry>
        </visual>
        <xacro:if value="${$(arg simplified_collision)==0}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${antenna_scale} ${antenna_scale} ${antenna_scale}"
                          filename="package://nifti_robot_description/meshes/antenna.dae"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==1}">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${antenna_scale} ${antenna_scale} ${antenna_scale}"
                          filename="package://nifti_robot_description/meshes/collide/antenna.dae"/>
                </geometry>
            </collision>
        </xacro:if>
        <xacro:if value="${$(arg simplified_collision)==2}">
            <collision>
                <origin rpy="0 ${pi/2} 0" xyz="-0.01864 0 0"/>
                <geometry>
                    <cylinder length="0.03718" radius="0.008" />
                </geometry>
            </collision>
            <collision>
                <origin rpy="0 0 0" xyz="-0.030 0 0.19053"/>
                <geometry>
                    <cylinder length="0.38107" radius="0.008" />
                </geometry>
            </collision>
        </xacro:if>
        <inertial>
            <origin xyz="-0.022 0.0203 0.02917" rpy="0 0 0"/>
            <mass value="${antenna_mass}"/>
            <xacro:inertia_meshlab
                    ixx="4.8780e-003" ixy="-6.2341e-007" ixz="-7.4538e-007"
                    iyy="9.0164e-004" iyz="-1.4394e-004"
                    izz="4.2946e-003"
                    scale="${antenna_scale}" mass="${antenna_mass}" />
        </inertial>
    </link>
	<xacro:if value="${'$(arg revision)' == '2021'}">
		<xacro:if value="$(arg has_omnicam)">
			<xacro:fixed_joint name="antenna_j" parent="rear_right_box" child="antenna" xyz="0.055 0.215 0.0" rpy="0 0 0" />
		</xacro:if>
		<xacro:if value="$(arg has_omnicam_vras)">
			<xacro:fixed_joint name="antenna_j" parent="base_link" child="antenna" xyz="${-$(arg rover_robotLengthBody)/2 + 0.12} 0.1 0.1551" rpy="0 0 0" />
		</xacro:if>
	</xacro:if>
	<xacro:unless value="${'$(arg revision)' == '2021'}">
		<xacro:fixed_joint name="antenna_j" parent="base_link" child="antenna" xyz="-0.3720 0.0789 0.1551" rpy="0 0 0" />
	</xacro:unless>

    <xacro:if value="$(arg has_gps_antenna)">
    <link name="gps_antenna">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 $(arg gps_antenna_height)"/>
            <geometry>
                <cylinder length="0.01" radius="$(arg gps_antenna_disc_radius)" />
            </geometry>
            <material name="aluminium">
                <color rgba="0.8 0.8 0.8 1"/>
            </material>
        </visual>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 ${$(arg gps_antenna_height)/2.0}"/>
            <geometry>
                <cylinder length="$(arg gps_antenna_height)" radius="$(arg gps_antenna_radius)" />
	    </geometry>
	    <material name="aluminium">
                <color rgba="0.8 0.8 0.8 1"/>
            </material>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 $(arg gps_antenna_height)"/>
            <geometry>
                <cylinder length="0.01" radius="${$(arg gps_antenna_disc_radius)*2}" />
            </geometry>
        </collision>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 ${$(arg gps_antenna_height)/2.0}"/>
            <geometry>
                <cylinder length="$(arg gps_antenna_height)" radius="${$(arg gps_antenna_radius)*3}" />
            </geometry>
        </collision>
        <inertial>
            <origin xyz="-0.022 0.0203 0.02917" rpy="0 0 0"/>
            <mass value="0.1"/>
            <xacro:inertia_meshlab
                    ixx="4.8780e-003" ixy="-6.2341e-007" ixz="-7.4538e-007"
                    iyy="9.0164e-004" iyz="-1.4394e-004"
                    izz="4.2946e-003" scale="1.0" mass="0.1" />
        </inertial>
    </link>
    <xacro:fixed_joint name="gps_antenna_j" parent="rear_right_box" child="gps_antenna" xyz="0.055 0.1 0.0" rpy="0 0 0" />
    </xacro:if>


    <xacro:macro name="track" params="prefix reflect">
        <link name="${prefix}_track">
            <xacro:if value="${len(body_color) == 0}">
                <visual>
                    <origin xyz="0 0 -0.0705" rpy="1.57 0 ${reflect*1.57}" />
                    <geometry>
                        <mesh scale="${track_scale} ${track_scale} ${track_scale}"
                              filename="package://nifti_robot_description/meshes/bogie.dae"/>
                    </geometry>
                </visual>
            </xacro:if>

            <xacro:if value="${len(body_color) > 0}">
                <visual>
                    <origin xyz="0 0 0.01855" rpy="${pi/2} 0 ${pi/2}" />
                    <geometry>
                        <box size="$(arg rover_trackWidth) ${2*$(arg rover_trackWheelRadius)} $(arg rover_trackLength)"/>
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
                <visual>
                    <origin rpy="${pi/2} 0 0" xyz="${$(arg rover_trackLength)/2} 0 0.01855"/>
                    <geometry>
                        <!-- enlarged because of laser filtering problems -->
                        <cylinder radius="$(arg rover_trackWheelRadius)" length="${$(arg rover_trackWidth)}"/>
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
                <visual>
                    <origin rpy="${pi/2} 0 0" xyz="${-$(arg rover_trackLength)/2} 0 0.01855"/>
                    <geometry>
                        <cylinder radius="$(arg rover_trackWheelRadius)" length="$(arg rover_trackWidth)"/>
                    </geometry>
                    <material name="body_color">
                        <color rgba="$(arg body_color)"/>
                    </material>
                </visual>
            </xacro:if>
            
            <xacro:if value="${$(arg simplified_collision)==0}">
                <collision>
                    <origin xyz="0 0 -0.0705" rpy="${pi/2} 0 ${reflect*pi/2}" />
                    <geometry>
                        <mesh scale="${track_scale} ${track_scale} ${track_scale}"
                              filename="package://nifti_robot_description/meshes/bogie.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==1}">
                <collision>
                    <origin xyz="0 0 -0.0705" rpy="${pi/2} 0 ${reflect*pi/2}" />
                    <geometry>
                        <mesh scale="${track_scale} ${track_scale} ${track_scale}"
                              filename="package://nifti_robot_description/meshes/collide/bogie.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==2}">
                <collision>
                    <origin xyz="0 0 0.01855" rpy="${pi/2} 0 ${pi/2}" />
                    <geometry>
                        <box size="$(arg rover_trackWidth) ${2*$(arg rover_trackWheelRadius)} $(arg rover_trackLength)"/>
                    </geometry>
                </collision>
                <collision>
                    <origin rpy="${pi/2} 0 0" xyz="${$(arg rover_trackLength)/2} ${-reflect*$(arg track_inward_enlargement)} 0.01855"/>
                    <geometry>
                        <!-- enlarged because of laser filtering problems -->
                        <cylinder radius="$(arg rover_trackWheelRadius)" length="${$(arg rover_trackWidth)+$(arg track_inward_enlargement)}"/>
                    </geometry>
                </collision>
                <collision>
                    <origin rpy="${pi/2} 0 0" xyz="${-$(arg rover_trackLength)/2} 0 0.01855"/>
                    <geometry>
                        <cylinder radius="$(arg rover_trackWheelRadius)" length="$(arg rover_trackWidth)"/>
                    </geometry>
                </collision>
            </xacro:if>
            <inertial>
                <origin xyz="0 0 0.0141" rpy="0 0 0"/>
                <mass value="${track_mass}"/>
                <xacro:inertia_meshlab
                        ixx="0.002731" ixy="0" ixz="0"
                        iyy="0.032554" iyz="0.000015"
                        izz="0.031391"
                        scale="${track_scale}" mass="${track_mass}" />
            </inertial>
        </link>
        <joint name="${prefix}_track_j" type="revolute">
            <parent link="base_link"/>
            <child link="${prefix}_track"/>
            <axis xyz="0 1 0"/>

            <xacro:if value="${reflect == 1}">
                <xacro:track_joint_properties track_fixed="$(arg robot_fixed)" track_angle="$(arg left_track_angle)" />
            </xacro:if>
            <xacro:if value="${reflect == -1}">
                <xacro:track_joint_properties track_fixed="$(arg robot_fixed)" track_angle="$(arg right_track_angle)" />
            </xacro:if>
        </joint>
    </xacro:macro>

    <xacro:macro name="track_joint_properties" params="track_fixed track_angle reflect:=^">
        <origin xyz="0 ${reflect*$(arg rover_trackDistance)/2.0} 0" rpy="0 ${track_angle} 0" />

        <xacro:if value="${reflect == -1}">
            <mimic joint="left_track_j" multiplier="-1" />
        </xacro:if>

        <xacro:unless value="${track_fixed}">
            <xacro:if value="$(arg has_differential)">
                <limit lower="-0.7" upper="0.7" effort="0" velocity="4" />
            </xacro:if>
            <xacro:unless value="$(arg has_differential)">
                <limit lower="0" upper="0" effort="0" velocity="4" />
            </xacro:unless>
        </xacro:unless>
        <xacro:if value="${track_fixed}">
            <limit lower="0" upper="0" effort="0" velocity="4" />
        </xacro:if>
    </xacro:macro>

    <xacro:track prefix="left" reflect="1" />
    <xacro:track prefix="right" reflect="-1" />

    <xacro:macro name="flipper" params="prefix1 prefix2 reflect_x reflect_y joint_pitch do_inward_enlargement">
        <link name="${prefix1}_${prefix2}_flipper">
            <visual>
                <origin xyz="0 0 0" rpy="3.32575 0 ${reflect_y*pi/2}" />
                <geometry>
                    <mesh scale="${flipper_scale} ${flipper_scale} ${flipper_scale}"
                          filename="package://nifti_robot_description/meshes/flipper.dae"/>
                </geometry>
            </visual>
            <xacro:if value="${$(arg simplified_collision)==0}">
                <collision name="${prefix1}_${prefix2}_flipper_collision">
                    <origin xyz="0 0 0" rpy="3.3 0 ${reflect_y*pi/2}" />
                    <geometry name="${prefix1}_${prefix2}_flipper_collision_geometry">
                        <mesh scale="${flipper_scale} ${flipper_scale} ${flipper_scale}"
                              filename="package://nifti_robot_description/meshes/flipper.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==1}">
                <collision name="${prefix1}_${prefix2}_flipper_collision">
                    <origin xyz="0 0 0" rpy="3.3 0 ${reflect_y*pi/2}" />
                    <geometry name="${prefix1}_${prefix2}_flipper_collision_geometry">
                        <mesh scale="${flipper_scale} ${flipper_scale} ${flipper_scale}"
                              filename="package://nifti_robot_description/meshes/collide/flipper.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==2}">
                <collision name="${prefix1}_${prefix2}_flipper_collision_large_wheel">
                    <origin rpy="${pi/2} 0 0" xyz="0 ${-reflect_y*$(arg flipper_inward_enlargement)*do_inward_enlargement/2.0} 0"/>
                    <geometry>
                        <cylinder length="${$(arg rover_flipperWidth)+$(arg flipper_inward_enlargement)*do_inward_enlargement}" radius="$(arg rover_trackWheelRadius)" />
                    </geometry>
                </collision>
                <collision name="${prefix1}_${prefix2}_flipper_collision_small_wheel">
                    <origin rpy="${pi/2} 0 0" xyz="${reflect_y*$(arg rover_flipperLength)} ${-reflect_y*$(arg flipper_inward_enlargement)*do_inward_enlargement/2.0} 0.0"/>
                    <geometry>
                        <cylinder length="${$(arg rover_flipperWidth)+$(arg flipper_inward_enlargement)*do_inward_enlargement}" radius="${0.029 + 0.029*($(arg flipper_inflation_ratio)-1)*do_inward_enlargement}" />
                    </geometry>
                </collision>
                <collision name="${prefix1}_${prefix2}_flipper_collision_top_bar">
                    <origin rpy="0 0.184162095 ${(1-reflect_y)*pi/2}" xyz="${reflect_y*$(arg rover_flipperLength)/2.0} ${-reflect_y*$(arg flipper_inward_enlargement)*do_inward_enlargement/2.0} 0.0325"/>
                    <geometry>
                        <box size="$(arg rover_flipperLength) ${$(arg rover_flipperWidth)+$(arg flipper_inward_enlargement)*do_inward_enlargement} ${0.055 + 0.055*($(arg flipper_inflation_ratio)-1)*do_inward_enlargement}" />
                    </geometry>
                </collision>
                <collision name="${prefix1}_${prefix2}_flipper_collision_bottom_bar">
                    <origin rpy="0 -0.184162095 ${(1-reflect_y)*pi/2}" xyz="${reflect_y*$(arg rover_flipperLength)/2} ${-reflect_y*$(arg flipper_inward_enlargement)*do_inward_enlargement/2.0} -0.0325"/>
                    <geometry>
                        <box size="$(arg rover_flipperLength) ${$(arg rover_flipperWidth)+$(arg flipper_inward_enlargement)*do_inward_enlargement} ${0.055 + 0.055*($(arg flipper_inflation_ratio)-1)*do_inward_enlargement}" />
                    </geometry>
                </collision>
                <collision name="${prefix1}_${prefix2}_flipper_collision_middle_bar">
                    <origin rpy="0 -0.02 ${(1-reflect_y)*pi/2}" xyz="${reflect_y*($(arg rover_flipperLength)/2.0 + 0.001)} ${-reflect_y*$(arg flipper_inward_enlargement)*do_inward_enlargement/2.0} 0.004"/>
                    <geometry>
                        <box size="0.20 ${$(arg rover_flipperWidth)+$(arg flipper_inward_enlargement)*do_inward_enlargement} 0.07" />
                    </geometry>
                </collision>
            </xacro:if>
            <inertial>
                <origin xyz="${reflect_y*0.08} 0 0.0" rpy="0 0 0"/>
                <mass value="${flipper_mass}"/>
                <xacro:inertia_meshlab
                        ixx="1.7491e-003" ixy="2.8512e-007" ixz="1.8277e-003"
                        iyy="1.2277e-002" iyz="-3.6288e-007"
                        izz="1.0941e-002"
                        scale="${flipper_scale}" mass="${flipper_mass}" />
            </inertial>
            <sensor name="${prefix1}_${prefix2}_flipper_contact" type="contact">
                <contact>
                    <collision>${prefix1}_${prefix2}_flipper_collision</collision>
                    <collision>${prefix1}_${prefix2}_flipper_collision_large_wheel</collision>
                    <collision>${prefix1}_${prefix2}_flipper_collision_small_wheel</collision>
                    <collision>${prefix1}_${prefix2}_flipper_collision_top_bar</collision>
                    <collision>${prefix1}_${prefix2}_flipper_collision_bottom_bar</collision>
                    <collision>${prefix1}_${prefix2}_flipper_collision_middle_bar</collision>
                </contact>
            </sensor>
        </link>
        <xacro:if value="${reflect_x == 1 and reflect_y == 1}">
            <xacro:flipper_joint flipper_fixed="$(arg robot_fixed)" flipper_angle="$(arg front_left_flipper_angle)" />
        </xacro:if>
        <xacro:if value="${reflect_x == 1 and reflect_y == -1}">
            <xacro:flipper_joint flipper_fixed="$(arg robot_fixed)" flipper_angle="$(arg front_right_flipper_angle)" />
        </xacro:if>
        <xacro:if value="${reflect_x == -1 and reflect_y == 1}">
            <xacro:flipper_joint flipper_fixed="$(arg robot_fixed)" flipper_angle="$(arg rear_left_flipper_angle)" />
        </xacro:if>
        <xacro:if value="${reflect_x == -1 and reflect_y == -1}">
            <xacro:flipper_joint flipper_fixed="$(arg robot_fixed)" flipper_angle="$(arg rear_right_flipper_angle)" />
        </xacro:if>

        <link name="${prefix1}_${prefix2}_flipper_end_point"/>
        <joint name="${prefix1}_${prefix2}_flipper_end_point_j" type="fixed">
            <parent link="${prefix1}_${prefix2}_flipper"/>
            <child link="${prefix1}_${prefix2}_flipper_end_point"/>
            <origin xyz="${reflect_y * ($(arg rover_flipperLength) + 0.0176)} 0 0" rpy="0 $(arg rover_flipperOffset) 0"/>
        </joint>
    </xacro:macro>

    <xacro:macro name="flipper_joint" params="flipper_fixed flipper_angle">
        <xacro:if value="${flipper_fixed}">
            <joint name="${prefix1}_${prefix2}_flipper_j" type="revolute">
                <xacro:flipper_joint_inner flipper_fixed="${flipper_fixed}" flipper_angle="${flipper_angle}" />
            </joint>
        </xacro:if>
        <xacro:unless value="${flipper_fixed}">
            <joint name="${prefix1}_${prefix2}_flipper_j" type="continuous">
                <xacro:flipper_joint_inner flipper_fixed="${flipper_fixed}" flipper_angle="${flipper_angle}" />
            </joint>
        </xacro:unless>
    </xacro:macro>

    <xacro:macro name="flipper_joint_inner" params="flipper_fixed flipper_angle">
        <parent link="${prefix2}_track"/>
        <child link="${prefix1}_${prefix2}_flipper"/>
        <axis xyz="0 1 0"/>
        <origin xyz="${reflect_x*$(arg rover_trackLength)/2} ${reflect_y*0.0735} 0.0195" rpy="0 ${joint_pitch+flipper_angle} 0"/>

        <xacro:if value="${flipper_fixed}">
            <limit lower="0" upper="0" effort="0" velocity="4" />
        </xacro:if>
    </xacro:macro>

    <xacro:if value="$(arg has_flippers)">
        <xacro:flipper prefix1="front" prefix2="left"  reflect_x="1"  reflect_y="1"  joint_pitch="${      $(arg rover_flipperOffset)}" do_inward_enlargement="1" />
        <xacro:flipper prefix1="front" prefix2="right" reflect_x="1"  reflect_y="-1" joint_pitch="${-pi + $(arg rover_flipperOffset)}" do_inward_enlargement="1" />
        <xacro:flipper prefix1="rear"  prefix2="left"  reflect_x="-1" reflect_y="1"  joint_pitch="${ pi - $(arg rover_flipperOffset)}" do_inward_enlargement="0" />
        <xacro:flipper prefix1="rear"  prefix2="right" reflect_x="-1" reflect_y="-1" joint_pitch="${     -$(arg rover_flipperOffset)}" do_inward_enlargement="0" />
    </xacro:if>

    <xacro:if value="$(arg has_sick_lidar)">
        <xacro:empty_link name="laser_base" />
        <xacro:fixed_joint name="laser_base_j" parent="base_link" child="laser_base" xyz="0.2502 0.0 0.1407" rpy="0 $(arg laser_pitch) 0" />

        <link name="laser">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 -${pi/2}" />
                <geometry>
                    <mesh scale="${laser_scale} ${laser_scale} ${laser_scale}"
                          filename="package://nifti_robot_description/meshes/laser.dae"/>
                </geometry>
            </visual>
            <xacro:if value="${$(arg simplified_collision)==0}">
                <collision>
                    <origin xyz="0 0 0" rpy="${pi/2} 0 -${pi/2}" />
                    <geometry>
                        <mesh scale="${laser_scale} ${laser_scale} ${laser_scale}"
                              filename="package://nifti_robot_description/meshes/laser.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==1}">
                <collision>
                    <origin xyz="0 0 0" rpy="${pi/2} 0 -${pi/2}" />
                    <geometry>
                        <mesh scale="${laser_scale} ${laser_scale} ${laser_scale}"
                              filename="package://nifti_robot_description/meshes/collide/laser.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==2}">
                <collision>
                    <origin rpy="${pi/2} 0 -${pi/2}" xyz="0 0 -0.04"/>
                    <geometry>
                        <box size="0.1159 0.16826 0.1159"/>
                    </geometry>
                </collision>
            </xacro:if>
            <inertial>
                <origin xyz="0 0 -0.04" rpy="0 0 0"/>
                <mass value="${laser_mass}"/>
                <xacro:inertia_meshlab
                        ixx="3.1194e-003" ixy="-2.2210e-006" ixz="-1.1577e-006"
                        iyy="3.1389e-003" iyz="-1.1530e-005"
                        izz="1.7656e-003"
                        scale="${laser_scale}" mass="${laser_mass}" />
            </inertial>
        </link>
        <joint name="laser_j" type="revolute">
            <parent link="laser_base"/>
            <child link="laser"/>
            <axis xyz="1 0 0"/>

            <xacro:property name="laser_angle" value="$(arg laser_angle)" />
            <origin xyz="0 0 0" rpy="${laser_angle+pi} 0 0"/>

            <xacro:if value="$(arg robot_fixed)">
                <limit lower="0" upper="0" effort="0" velocity="4" />
            </xacro:if>
            <xacro:unless value="$(arg robot_fixed)">
							<limit lower="-2.3561945" upper="2.3561945" effort="10" velocity="$(arg rover_maxScanningSpeed)" />
            </xacro:unless>
        </joint>
    </xacro:if>

    <!-- virtual link to specify IMU position -->
    <xacro:empty_link name="imu" />

    <xacro:unless value="${'$(arg revision)' == '2021'}">
    	<xacro:fixed_joint name="imu_j" parent="base_link" child="imu" xyz="0 0 0.1500" rpy="${pi} 0 0" />
    </xacro:unless>
    <xacro:if value="${'$(arg revision)' == '2021'}">
	    <xacro:fixed_joint name="imu_j" parent="base_link" child="imu" xyz="0 0 0.1500" rpy="${pi} 0 ${-pi/2}" />
    </xacro:if>

    <xacro:if value="$(arg has_omnicam)">
        <link name="omnicam">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <mesh scale="${omnicam_scale} ${omnicam_scale} ${omnicam_scale}"
                          filename="package://nifti_robot_description/meshes/omnicam.dae"/>
                </geometry>
            </visual>
            <xacro:if value="${$(arg simplified_collision)==0}">
                <collision>
                    <origin xyz="0 0 0" rpy="0 0 0" />
                    <geometry>
                        <mesh scale="${omnicam_scale} ${omnicam_scale} ${omnicam_scale}"
                              filename="package://nifti_robot_description/meshes/omnicam.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==1}">
                <collision>
                    <origin xyz="0 0 0" rpy="0 0 0" />
                    <geometry>
                        <mesh scale="${omnicam_scale} ${omnicam_scale} ${omnicam_scale}"
                              filename="package://nifti_robot_description/meshes/collide/omnicam.dae"/>
                    </geometry>
                </collision>
            </xacro:if>
            <xacro:if value="${$(arg simplified_collision)==2}">
                <collision>
                    <origin rpy="0 0 0" xyz="-0.003 -0.0015 0.003"/>
                    <geometry>
                        <cylinder length="0.137" radius="0.068" />
                    </geometry>
                </collision>
            </xacro:if>
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="${omnicam_mass}"/>
                <xacro:inertia_meshlab
                        ixx="2.3726e-003" ixy="-3.0562e-006" ixz="-2.3418e-006"
                        iyy="2.3716e-003" iyz="5.1202e-006"
                        izz="1.6667e-003"
                        scale="${omnicam_scale}" mass="${omnicam_mass}" />
            </inertial>
        </link>

        <xacro:empty_link name="omnicam_forward" />
        
        <xacro:if value="${'$(arg revision)' == '2021'}">
            <xacro:fixed_joint name="omnicam_j" parent="top_box" child="omnicam" xyz="-0.0065 0 ${0.137/2 + 0.097}" rpy="0 0 ${-2*pi/5}" />
            <xacro:fixed_joint name="omnicam_forward_j" parent="omnicam" child="omnicam_forward" xyz="0 0 0" rpy="0 0 ${2*pi/5}" />
        </xacro:if>
        <xacro:unless value="${'$(arg revision)' == '2021'}">
            <xacro:fixed_joint name="omnicam_j" parent="top_box" child="omnicam" xyz="0.0023 -0.0017 0.1292" rpy="0 0 -0.628318530" />
            <xacro:fixed_joint name="omnicam_forward_j" parent="omnicam" child="omnicam_forward" xyz="0 0 0" rpy="0 0 0.628" />
        </xacro:unless>

        <xacro:empty_link name="omnicam_top" />
        <xacro:fixed_joint name="omnicam_top_j" parent="omnicam_forward" child="omnicam_top" xyz="0 0 ${0.137/2}" rpy="0 0 0" />

        <xacro:empty_link name="omnicam_bottom" />
        <xacro:fixed_joint name="omnicam_bottom_j" parent="omnicam_forward" child="omnicam_bottom" xyz="0 0 ${-0.137/2}" rpy="0 0 0" />
        
        <xacro:empty_link name="camera_0" />
        <xacro:calibrated_fixed_joint name="camera_0_j" parent="omnicam" child="camera_0" />
        <xacro:empty_link name="camera_1" />
        <xacro:calibrated_fixed_joint name="camera_1_j" parent="omnicam" child="camera_1" />
        <xacro:empty_link name="camera_2" />
        <xacro:calibrated_fixed_joint name="camera_2_j" parent="omnicam" child="camera_2" />
        <xacro:empty_link name="camera_3" />
        <xacro:calibrated_fixed_joint name="camera_3_j" parent="omnicam" child="camera_3" />
        <xacro:empty_link name="camera_4" />
        <xacro:calibrated_fixed_joint name="camera_4_j" parent="omnicam" child="camera_4" />
        <xacro:empty_link name="camera_5" />
        <xacro:calibrated_fixed_joint name="camera_5_j" parent="omnicam" child="camera_5" />

        <xacro:if value="$(arg has_omnicam_sensor_mount)">
            <!-- For some reason, the mount is visible in simulated cameras, so we hide it in Gazebo. -->
            <xacro:if value="${'$(arg rendering_target)' == 'urdf'}">
                <link name="omnicam_sensor_mount">
                    <visual>
                        <origin rpy="3.14152 0 0" xyz="-0.003 -0.002 0"/>
                        <geometry>
                            <mesh scale="0.001 0.001 0.001"
                                  filename="package://nifti_robot_description/meshes/lb3_mount_2.stl"/>
                        </geometry>
                        <material name="mount_black">
                            <color rgba="0.1 0.1 0.1 1" />
                        </material>
                    </visual>
    
                    <visual>
                        <origin rpy="0 0 0" xyz="-0.0045 0 -0.14"/>
                        <geometry>
                            <mesh scale="0.001 0.001 0.001"
                                  filename="package://nifti_robot_description/meshes/lb3_mount_bottom.stl"/>
                        </geometry>
                        <material name="mount_black">
                            <color rgba="0.1 0.1 0.1 1" />
                        </material>
                    </visual>
    
                    <collision>
                        <origin rpy="0 0 0" xyz="0 0 -0.015"/>
                        <geometry>
                            <cylinder radius="0.095" length="0.044"/>
                        </geometry>
                    </collision>
                </link>
            </xacro:if>
            <xacro:unless value="${'$(arg rendering_target)' == 'urdf'}">
                <xacro:empty_link name="omnicam_sensor_mount" />
            </xacro:unless>

            <joint name="omnicam_sensor_mount_j" type="fixed">
                <child link="omnicam_sensor_mount"/>
                <parent link="omnicam_top"/>
                <origin xyz="0 0.0 0.0" rpy="0 0 0"/>
            </joint>
        </xacro:if>

    </xacro:if>

</robot>
